#!/usr/bin/env python
# Copyright (C) 2011 Gregor Richards
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

import os
import shutil
import subprocess
import sys

# the command to run
cmd = []

# the mount points
mounts = {}

class Mount:
    def __init__(self, rrw, host, guest):
        self.rrw = rrw
        self.host = host
        self.guest = guest

# the basic, predefined mounts
def baseMounts():
    for m in ["/usr", "/bin", "/sbin", "/lib", "/lib32", "/lib64", "/etc/alternatives", "/dev"]:
        if os.path.isdir(m):
            mounts[m] = Mount("r", m, m)

# kernel
linux = False

# mudem
mudem = False

# child's cwd
cwd = os.getcwd()

# where to get stdin from
childStdin = "fd:0"

# keep init's stdout?
initStdout = False

# verbose?
verbose = False

# (optional) timeout
timeout = 0

# (optional) memory
memory = "256M"

# (optional) X11? Port forwarding?
x11 = False
mudemHost = []
mudemGuest = []

def usage():
    print("Use: umlbox [options] <command>\n" +
          "Options:\n" +
          "\t-B: Use base set of mount points.\n" +
          "\t-f[w] <dir>: Share the given directory, optionally writable.\n" +
          "\t-t[w] <guest dir> <host dir>: Share the given directory with a different name, optionally writable.\n" +
          "\t--cwd <dir>: Set cwd in guest to <dir>.\n" +
          "\t--no-cwd: Set cwd in guest to /.\n" +
          "\t--copy-cwd: Copy the host cwd (the default).\n" +
          "\t-L<hport>:<gport>: Forward local port hport into the UMLBox on\n" +
          "\t                   port gport.\n" +
          "\t-R<gport>:<host>:<hport>: Forward port gport out of the UMLBox to\n" +
          "\t                          the given host on port hport.\n" +
          "\t-X: Enable X11 forwarding.\n" +
          "\t-n: Detach from stdin (< /dev/null will not work!).\n" +
          "\t-T <timeout>: Set a timeout.\n" +
          "\t-m <memory>: Set the memory limit (default 256M).\n" +
          "\t--uml <kernel>: Use the given UML kernel.\n" +
          "\t--mudem <mudem>: Use the given mutexer/demutexer.\n" +
          "\t-v: Verbose mode.\n" +
          "\t--debug: Keep UML and UMLBox's init's debug output intact.\n")

i = 1
oncmd = False
while i < len(sys.argv):
    arg = sys.argv[i]
    if oncmd or arg[0] != "-":
        oncmd = True
        cmd.append("'" + arg.replace("'", "'\\\''").replace("\n", "'\\n'") + "'")

    elif arg == "--":
        oncmd = True

    elif arg == "-B" or arg == "--base-mounts":
        baseMounts()

    elif arg == "-f" or arg == "--mount":
        i += 1
        mdir = os.path.abspath(sys.argv[i])
        mounts[mdir] = Mount("r", mdir, mdir)

    elif arg == "-fw" or arg == "--mount-write":
        i += 1
        mdir = os.path.abspath(sys.argv[i])
        mounts[mdir] = Mount("rw", mdir, mdir)

    elif arg == "-t" or arg == "--translate":
        i += 1
        guest = sys.argv[i]
        i += 1
        host = os.path.abspath(sys.argv[i])
        mounts[guest] = Mount("r", host, guest)

    elif arg == "-tw" or arg == "--translate-write":
        i += 1
        guest = sys.argv[i]
        i += 1
        host = os.path.abspath(sys.argv[i])
        mounts[guest] = Mount("rw", host, guest)

    elif arg == "--cwd":
        i += 1
        cwd = sys.argv[i]

    elif arg == "--no-cwd":
        cwd = "/"

    elif arg == "--copy-cwd":
        cwd = os.getcwd()

    elif arg[0:2] == "-L":
        parts = arg[2:].split(":")
        if len(parts) != 2:
            usage()
            sys.exit(1)
        mudemHost.append("tcp4-listen:" + str(int(parts[0])))
        mudemGuest.append("tcp4:127.0.0.1:" + str(int(parts[1])))

    elif arg[0:2] == "-R":
        parts = arg[2:].split(":")
        if len(parts) != 3:
            usage()
            sys.exit(1)
        mudemHost.append("tcp4:" + parts[1] + ":" + str(int(parts[2])))
        mudemGuest.append("tcp4-listen:" + str(int(parts[0])))

    elif arg == "-X" or arg == "--x11":
        x11 = True

    elif arg == "-n" or arg == "--no-stdin":
        childStdin = "null"

    elif arg == "-T" or arg == "--timeout":
        i += 1
        timeout = int(sys.argv[i])

    elif arg == "-m" or arg == "--memory":
        i += 1
        memory = sys.argv[i]

    elif arg == "--uml":
        i += 1
        linux = sys.argv[i]

    elif arg == "--mudem":
        i += 1
        mudem = sys.argv[i]

    elif arg == "-v" or arg == "--verbose":
        initStdout = True
        verbose = True

    elif arg == "--debug":
        initStdout = True

    else:
        usage()
        sys.exit(1)

    i += 1

if len(cmd) == 0:
    usage()
    sys.exit(1)

# globals
bindir = os.path.abspath(os.path.dirname(sys.argv[0]))
pid = str(os.getpid())
uid = str(os.getuid())
gid = str(os.getgid())
istty = False
if os.isatty(1):
    istty = True
conf = "/tmp/" + pid + ".conf"

# find UML
if linux == False:
    linux = bindir + "/umlbox-linux"
    if not os.path.exists(linux):
        linux = bindir + "/linux"
    if not os.path.exists(linux):
        linux = "/usr/bin/linux"
    if not os.path.exists(linux):
        print("Could not find a UML kernel.")
        sys.exit(1)
if verbose:
    print("Found UML kernel " + linux)

# find our mudem
if mudem == False:
    mudem = bindir + "/umlbox-mudem"
mudemHost = [mudem, "0"] + mudemHost
mudemGuest = [mudem, "1"] + mudemGuest

# find initrd
initrd = bindir + "/../lib/umlbox/umlbox-initrd.gz"
if not os.path.exists(initrd):
    initrd = bindir + "/umlbox-initrd.gz"
if not os.path.exists(initrd):
    print("Could not find umlbox-initrd.gz")
    sys.exit(1)
if verbose:
    print("Found initrd " + initrd)

# if X11 forwarding is requested, set it up
if x11:
    mudemHost.append("unix:/tmp/.X11-unix/X0")
    mudemGuest.append("tcp4-listen:6000")

# sanity check the environment
if not ("HOME" in os.environ):
    # UML barfs if it doesn't have a HOME
    os.environ["HOME"] = "/tmp"

# make the basic setup
confs = ("setgid " + gid + "\n" +
         "setuid " + uid + "\n")
ttycat = ""
if not istty:
    confs += "ttyraw\n"
    ttycat = " | cat"

# figure out the hostmount configuration
mountPaths = list(mounts.keys())
mountPaths.sort(key=lambda x: len(x))

# and make the hostmount commands
for path in mountPaths:
    mount = mounts[path]
    confs += "hostmount " + mount.rrw + " " + mount.host + " " + mount.guest + "\n"

# Filesystems/basic networking
confs += ("mount tmpfs /tmp tmpfs\n" +
          "mount proc /proc proc\n" +
          "mount sysfs /sys sysfs\n" +
          "run root / /sbin/ifconfig lo 127.0.0.1\n")

# Full networking (if requested)
if len(mudemGuest) > 2:
    confs += ("input ../tty2\n" +
              "output ../tty2\n" +
              "error ../tty1\n" +
              "ttyraw\n"
              "daemon root / " + " ".join(mudemGuest) + "\n")

# Process control
confs += ("timeout " + str(timeout) + "\n" +
          "input ../tty1\n" +
          "output ../tty1\n")
if not istty:
    confs += "ttyraw\n"

# And finally, the command
confs += "run user " + cwd + " " + " ".join(cmd) + ttycat + "\n"

# Write out the configuration
conff = open(conf, "w")
conff.write(confs)
conff.close()
if verbose:
    print("Configuration:\n" + confs + "\n")

# open all our new pipes
childStdout = os.dup(1) # To keep output
devnullw = os.open("/dev/null", os.O_WRONLY)
stdoutw = devnullw
stdoutws = "null"
if initStdout:
    stdoutw = None
    stdoutws = "fd:1"

# Our mudem host
mudemProc = None
mudemRedir = "null"
if len(mudemHost) > 2:
    mudemProc = subprocess.Popen(mudemHost, stdin=subprocess.PIPE,
        stdout=subprocess.PIPE, close_fds=False)
    mudemRedir = ("fd:" + str(mudemProc.stdout.fileno()) +
        ",fd:" + str(mudemProc.stdin.fileno()))

cmd = [linux, "initrd=" + initrd, "ubda=" + conf, "mem=" + memory,
    "con1=" + childStdin + ",fd:" + str(childStdout),
    "con2=" + mudemRedir,
    "con=null," + stdoutws]
if verbose:
    print("Command: " + str(cmd))

subprocess.call(cmd, stdout=stdoutw, stderr=devnullw, close_fds=False)
os.close(devnullw)
os.close(childStdout)

if mudemProc != None:
    mudemProc.terminate()

os.unlink(conf)
